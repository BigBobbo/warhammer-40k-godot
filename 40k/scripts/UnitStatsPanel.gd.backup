extends PanelContainer

@onready var toggle_button: Button = $VBox/Header/ToggleButton
@onready var scroll_container: ScrollContainer = $VBox/ScrollContainer
@onready var content_container: VBoxContainer = $VBox/ScrollContainer/Content
@onready var stats_label: Label = $VBox/ScrollContainer/Content/StatsContainer/StatsLabel
@onready var weapons_container: VBoxContainer = $VBox/ScrollContainer/Content/WeaponsContainer
@onready var abilities_container: VBoxContainer = $VBox/ScrollContainer/Content/AbilitiesContainer
@onready var composition_container: VBoxContainer = $VBox/ScrollContainer/Content/CompositionContainer
@onready var keywords_label: Label = $VBox/ScrollContainer/Content/KeywordsContainer/KeywordsLabel

var is_collapsed: bool = true
var unit_data: Dictionary = {}
var tween: Tween

func _ready() -> void:
	print("UnitStatsPanel: _ready() called")
	print("UnitStatsPanel: toggle_button = ", toggle_button)
	print("UnitStatsPanel: stats_label = ", stats_label)
	print("UnitStatsPanel: keywords_label = ", keywords_label)
	print("UnitStatsPanel: weapons_container = ", weapons_container)
	
	# Connect the toggle button
	if toggle_button:
		toggle_button.pressed.connect(_on_toggle_pressed)
		# Make the button more visible
		toggle_button.add_theme_font_size_override("font_size", 14)
		print("UnitStatsPanel: Toggle button connected")
	else:
		print("UnitStatsPanel: WARNING - Toggle button is null!")
	
	# Start expanded by default
	is_collapsed = true  # Set to true first so set_collapsed(false) will work
	set_collapsed(false)
	
	# Add some test content to verify the panel is working
	_show_test_content()


func _on_toggle_pressed() -> void:
	set_collapsed(!is_collapsed)

func set_collapsed(collapsed: bool) -> void:
	is_collapsed = collapsed
	print("UnitStatsPanel: Setting collapsed to ", collapsed)
	
	if scroll_container:
		scroll_container.visible = !collapsed
		print("UnitStatsPanel: Scroll container visible = ", !collapsed)
	
	if toggle_button:
		toggle_button.text = "▼ Unit Stats" if collapsed else "▲ Unit Stats"
		print("UnitStatsPanel: Toggle button text = ", toggle_button.text)
	
	# Animate panel height
	if tween:
		tween.kill()
	
	tween = create_tween()
	var target_height = 40 if collapsed else 300
	tween.tween_property(self, "custom_minimum_size:y", target_height, 0.3)
	
	# Also update the offset to expand upward
	var target_offset = -40 if collapsed else -300
	tween.parallel().tween_property(self, "offset_top", target_offset, 0.3)
	
	print("UnitStatsPanel: Target height = ", target_height, ", Target offset = ", target_offset)

func display_unit(unit_dict: Dictionary) -> void:
	unit_data = unit_dict
	print("UnitStatsPanel: display_unit called with data: ", unit_data.keys())
	
	if not unit_data.has("meta"):
		print("Warning: Unit data missing 'meta' field. Available keys: ", unit_data.keys())
		return
	
	var meta = unit_data["meta"]
	
	# Display keywords
	if keywords_label and meta.has("keywords"):
		keywords_label.text = ", ".join(meta["keywords"])
	
	# Display stats
	if stats_label and meta.has("stats"):
		var stats = meta["stats"]
		stats_label.text = "M%d\" | T%d | Sv%d+ | W%d | Ld%d+ | OC%d" % [
			stats.get("move", 0),
			stats.get("toughness", 0),
			stats.get("save", 0),
			stats.get("wounds", 0),
			stats.get("leadership", 0),
			stats.get("objective_control", 0)
		]
	
	# Display weapons tables
	_create_weapons_tables()
	
	# Display abilities
	_create_abilities_list()
	
	# Display unit composition
	_create_composition_list()
	
	# Auto-expand when unit selected
	set_collapsed(false)

func _create_weapons_tables() -> void:
	# Clear existing
	for child in weapons_container.get_children():
		child.queue_free()
	
	if not unit_data.has("meta") or not unit_data["meta"].has("weapons"):
		return
	
	var weapons = unit_data["meta"]["weapons"]
	if weapons.is_empty():
		return
	
	# Separate weapons by type
	var ranged_weapons = []
	var melee_weapons = []
	
	for weapon in weapons:
		if weapon.get("type", "") == "Ranged":
			ranged_weapons.append(weapon)
		elif weapon.get("type", "") == "Melee":
			melee_weapons.append(weapon)
	
	# Create ranged weapons table
	if not ranged_weapons.is_empty():
		var ranged_label = Label.new()
		ranged_label.text = "RANGED WEAPONS"
		ranged_label.add_theme_font_size_override("font_size", 14)
		weapons_container.add_child(ranged_label)
		
		var ranged_grid = GridContainer.new()
		ranged_grid.columns = 7
		ranged_grid.add_theme_constant_override("h_separation", 10)
		ranged_grid.add_theme_constant_override("v_separation", 5)
		
		# Headers
		for header in ["Range", "A", "BS", "S", "AP", "D", "Abilities"]:
			var label = Label.new()
			label.text = header
			label.add_theme_font_size_override("font_size", 12)
			label.modulate = Color(0.8, 0.8, 1.0)  # Light blue tint
			ranged_grid.add_child(label)
		
		# Data rows
		for weapon in ranged_weapons:
			_add_weapon_row(ranged_grid, weapon, "ranged")
		
		weapons_container.add_child(ranged_grid)
		
		# Add spacing
		var spacer = Control.new()
		spacer.custom_minimum_size = Vector2(0, 10)
		weapons_container.add_child(spacer)
	
	# Create melee weapons table
	if not melee_weapons.is_empty():
		var melee_label = Label.new()
		melee_label.text = "MELEE WEAPONS"
		melee_label.add_theme_font_size_override("font_size", 14)
		weapons_container.add_child(melee_label)
		
		var melee_grid = GridContainer.new()
		melee_grid.columns = 7
		melee_grid.add_theme_constant_override("h_separation", 10)
		melee_grid.add_theme_constant_override("v_separation", 5)
		
		# Headers
		for header in ["Range", "A", "WS", "S", "AP", "D", "Abilities"]:
			var label = Label.new()
			label.text = header
			label.add_theme_font_size_override("font_size", 12)
			label.modulate = Color(1.0, 0.8, 0.8)  # Light red/pink tint
			melee_grid.add_child(label)
		
		# Data rows
		for weapon in melee_weapons:
			_add_weapon_row(melee_grid, weapon, "melee")
		
		weapons_container.add_child(melee_grid)

func _add_weapon_row(grid: GridContainer, weapon: Dictionary, type: String) -> void:
	var cells = []
	
	if type == "ranged":
		cells = [
			str(weapon.get("range", "")) + "\"" if weapon.get("range", "") != "" else "",
			str(weapon.get("attacks", "")),
			str(weapon.get("ballistic_skill", "")) + "+" if weapon.get("ballistic_skill", "") != "" else "",
			str(weapon.get("strength", "")),
			str(weapon.get("ap", "")),
			str(weapon.get("damage", "")),
			weapon.get("special_rules", "")
		]
	else:  # melee
		cells = [
			"Melee",
			str(weapon.get("attacks", "")),
			str(weapon.get("weapon_skill", "")) + "+" if weapon.get("weapon_skill", "") != "" else "",
			str(weapon.get("strength", "")),
			str(weapon.get("ap", "")),
			str(weapon.get("damage", "")),
			weapon.get("special_rules", "")
		]
	
	for cell_text in cells:
		var label = Label.new()
		label.text = str(cell_text)
		label.add_theme_font_size_override("font_size", 11)
		grid.add_child(label)

func _create_abilities_list() -> void:
	# Clear existing
	for child in abilities_container.get_children():
		child.queue_free()
	
	if not unit_data.has("meta") or not unit_data["meta"].has("abilities"):
		return
	
	var abilities = unit_data["meta"]["abilities"]
	if abilities.is_empty():
		return
	
	var abilities_label = Label.new()
	abilities_label.text = "ABILITIES"
	abilities_label.add_theme_font_size_override("font_size", 14)
	abilities_container.add_child(abilities_label)
	
	for ability in abilities:
		var ability_container = VBoxContainer.new()
		
		var name_label = Label.new()
		name_label.text = "• " + ability.get("name", "Unknown")
		if ability.has("type"):
			name_label.text += " (" + ability.get("type", "") + ")"
		name_label.add_theme_font_size_override("font_size", 12)
		name_label.modulate = Color(1.0, 1.0, 0.8)  # Slight yellow tint
		ability_container.add_child(name_label)
		
		if ability.has("description"):
			var desc_label = Label.new()
			desc_label.text = "  " + ability.get("description", "")
			desc_label.add_theme_font_size_override("font_size", 10)
			desc_label.autowrap_mode = TextServer.AUTOWRAP_WORD_SMART
			ability_container.add_child(desc_label)
		
		abilities_container.add_child(ability_container)

func _create_composition_list() -> void:
	# Clear existing
	for child in composition_container.get_children():
		child.queue_free()
	
	if not unit_data.has("meta") or not unit_data["meta"].has("unit_composition"):
		return
	
	var composition = unit_data["meta"]["unit_composition"]
	if composition.is_empty():
		return
	
	var comp_label = Label.new()
	comp_label.text = "UNIT COMPOSITION"
	comp_label.add_theme_font_size_override("font_size", 14)
	composition_container.add_child(comp_label)
	
	for comp_item in composition:
		var item_label = Label.new()
		item_label.text = "• " + comp_item.get("description", "Unknown")
		item_label.add_theme_font_size_override("font_size", 11)
		composition_container.add_child(item_label)
	
	# Also show model count from models array if available
	if unit_data.has("models"):
		var models = unit_data["models"]
		var alive_count = 0
		var total_count = models.size()
		
		for model in models:
			if model.get("alive", true):
				alive_count += 1
		
		var model_status = Label.new()
		model_status.text = "Models: %d/%d alive" % [alive_count, total_count]
		model_status.add_theme_font_size_override("font_size", 11)
		model_status.modulate = Color(0.8, 1.0, 0.8) if alive_count == total_count else Color(1.0, 0.8, 0.8)
		composition_container.add_child(model_status)

func _show_test_content() -> void:
	print("UnitStatsPanel: _show_test_content() called")
	
	# Add some test content to verify the panel is working
	if keywords_label:
		keywords_label.text = "TEST KEYWORDS"
		print("UnitStatsPanel: Keywords label set")
	else:
		print("UnitStatsPanel: Keywords label is null!")
	
	if stats_label:
		stats_label.text = "M6\" | T4 | Sv3+ | W2 | Ld6+ | OC2 (TEST)"
		print("UnitStatsPanel: Stats label set")
	else:
		print("UnitStatsPanel: Stats label is null!")
	
	# Add a simple test label to weapons container
	if weapons_container:
		var test_label = Label.new()
		test_label.text = "WEAPONS TEST - Panel is working!"
		test_label.add_theme_font_size_override("font_size", 14)
		weapons_container.add_child(test_label)
		print("UnitStatsPanel: Test label added to weapons container")
	else:
		print("UnitStatsPanel: Weapons container is null!")
	
	print("UnitStatsPanel: Test content setup complete")